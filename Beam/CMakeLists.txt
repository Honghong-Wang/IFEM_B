PROJECT(Beam)

CMAKE_MINIMUM_REQUIRED(VERSION 2.6)

# Add local modules
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH}
                      ${PROJECT_SOURCE_DIR}/../../../cmake/Modules)

IF (NOT CMAKE_BUILD_TYPE)
  SET(CMAKE_BUILD_TYPE Release)
ENDIF (NOT CMAKE_BUILD_TYPE)

# Required packages
IF (NOT IFEM_CONFIGURED)
  FIND_PACKAGE(IFEM REQUIRED)
ENDIF (NOT IFEM_CONFIGURED)

SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${IFEM_CXX_FLAGS}")

INCLUDE_DIRECTORIES(${IFEM_INCLUDES} ${PROJECT_SOURCE_DIR}/..)

IF (NOT WIN32)
  # Emit position-independent code, suitable for dynamic linking
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
  # Enable all warnings
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")
ENDIF (NOT WIN32)

SET(LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lib)

#INCLUDE(cmake/UseMultiArch.cmake)

FILE(GLOB Beam_SOURCES *.C)
FILE(GLOB Beam_HEADERS *.h)
ADD_LIBRARY(Beam ${Beam_SOURCES})

SET_TARGET_PROPERTIES(Beam PROPERTIES
                      VERSION ${IFEM_VERSION}
                      SOVERSION ${IFEM_ABI_VERSION})

#INSTALL(TARGETS Beam DESTINATION ${CMAKE_INSTALL_LIBDIR})
INSTALL(FILES ${Beam_HEADERS} DESTINATION include/IFEM)
